name: Spree E-commerce CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RAILS_ENV: test
  NODE_ENV: test
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/spree_test
  SPREE_API_KEY: ${{ secrets.SPREE_API_KEY }}
  SPREE_API_TOKEN: ${{ secrets.SPREE_API_TOKEN }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips libvips-dev
      
      - name: Install Playwright
        run: |
          npm ci
          npx playwright install --with-deps
      
      - name: Set up database
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
          bundle exec rails db:seed
      
      - name: Cache test data
        uses: actions/cache@v3
        with:
          path: test/fixtures/files
          key: ${{ runner.os }}-test-data-${{ hashFiles('test/fixtures/files/**') }}

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [api, ui, security]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: spree_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Run API Tests
        if: matrix.test-group == 'api'
        run: |
          npx playwright test tests/e2e/api/checkout.spec.ts --reporter=html
      
      - name: Run UI Tests
        if: matrix.test-group == 'ui'
        run: |
          npx playwright test tests/e2e/ui/abandonedCart.spec.ts --reporter=html
      
      - name: Run Security Tests
        if: matrix.test-group == 'security'
        run: |
          npx playwright test tests/e2e/api/security.spec.ts --reporter=html
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-group }}
          path: |
            test-results/
            playwright-report/
            tmp/test-results/
            log/

  security:
    name: Security Checks
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
      
      - name: Run bundle audit
        run: |
          bundle exec bundle-audit check --update
      
      - name: Run brakeman
        run: |
          bundle exec brakeman -A -w2
      
      - name: Run npm audit
        run: |
          npm audit
      
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  report:
    name: Generate Test Report
    needs: [test, security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: all-test-results
      
      - name: Generate combined report
        run: |
          npm install -g playwright-merge-html-reports
          playwright-merge-html-reports -i "all-test-results/*" -o "combined-report"
      
      - name: Upload combined report
        uses: actions/upload-artifact@v3
        with:
          name: combined-test-report
          path: combined-report/
          retention-days: 30 